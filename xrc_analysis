# -*- coding: utf-8 -*-
"""
Created on Tue Nov 21 21:33:36 2023

@author: Elias Garratt and Tia Gray
"""

import pandas as pd
import csv
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy.special import wofz

# Specify the string that marks the header
header_string = "Angle"

# Initialize a list to store the data rows
data_rows = []

# Prompt for file path from user, then use this file path to parse the data
file_path = input("Please enter the file path of the x-ray rocking curve (XRC) data you would like to process:")
# Remove any double quotes from the file path
file_path = file_path.replace('"', '')
with open(file_path, 'r', newline='') as csvfile:
    reader = csv.reader(csvfile)
    
    # Variable to indicate if the header has been found
    header_found = False
    
    for row in reader:
        # Check if the header string is in the row
        if header_string in row:
            # Set header_found to True and continue to the next row
            header_found = True
            continue
        
        # If header is found, add the row to data_rows
        if header_found:
            data_rows.append(row)

# Convert the list of data rows into a DataFrame
xrcfile = pd.DataFrame(data_rows, columns=None)  # Assumes no header row in data

col_names = ["Omega", "Thingy", "Intensity", "residual"]

xrcfile.columns = col_names
xrcfile = xrcfile.drop(columns = "Thingy")
xrcfile = xrcfile.astype(float)

# Print the DataFrame
print("The original RSM file is: \n",xrcfile,"\n")

# Find the row with the maximum Intensity value
max_intensity_row = xrcfile.loc[xrcfile['Intensity'].idxmax()]

# Get the values and column names
values = max_intensity_row.values
columns = max_intensity_row.index

# Create a dictionary to store the values with their corresponding column names
data_dict = {column: value for column, value in zip(columns, values)}
print("The row containing the values used to center and generate the data slice is: \n",data_dict,"\n")

# manipulate 2Theta, Omega, Qx, and Qy columns to correct their (x, y) zeros to the location of the maximum intensity value
xrcfile['Omega_centered'] = xrcfile['Omega']-data_dict['Omega']
xrcfile['Omega_arcsecond'] = xrcfile['Omega_centered']*3600
xrcfile['Intensity_normalized'] = xrcfile['Intensity']/data_dict['Intensity']


# Define the multi-peak Voigt model function
def multi_voigt_function(x, *params):
    num_peaks = len(params) // 4
    result = np.zeros_like(x)

    for i in range(num_peaks):
        amplitude, center, sigma, gamma = params[i * 4:(i + 1) * 4]
        z = ((x - center) + 1j * gamma) / (sigma * np.sqrt(2))
        result += amplitude * np.real(wofz(z))

    return result

# Extract the x & y from the “xrcfile” data
x = xrcfile['Omega_arcsecond']
y = xrcfile['Intensity_normalized']


# Voigt fitting
num_peaks = 2  # Change this to the desired number of peaks
initial_guess = [np.max(y), np.mean(x), 1, 1] * num_peaks
params_fit, pcov = curve_fit(multi_voigt_function, x, y, p0=initial_guess)

# Extracting fitted parameters for each peak
fitted_params = [params_fit[i:i + 4] for i in range(0, len(params_fit), 4)]


# Create a list to store the Voigt function values for each peak
voigt_values_list = []

# Print fitted parameters for each peak and calculate Voigt function values
for i, params in enumerate(fitted_params):
    print(f"Parameters for Peak {i + 1}: Amplitude={params[0]}, Center={params[1]}, Sigma={params[2]}, Gamma={params[3]}")
    
    # Calculate Voigt function values for the entire x range
    voigt_values = multi_voigt_function(x, *params)
    
    # Add the Voigt function values as a new column in the DataFrame
    xrcfile[f'Voigt_values_Peak_{i + 1}'] = voigt_values
    
    # Append the Voigt function values to the list
    voigt_values_list.append(voigt_values)

# Calculate FWHM from the Voigt parameters for each peak
fwhm_values = [2 * np.sqrt(2 * np.log(2)) * params[2] for params in fitted_params]

# Calculate FWTTM from the Voigt parameters for each peak
fwttm_values = [2 * np.sqrt(2 * np.log(10000)) * params[2] for params in fitted_params]

# Calculate w_g, w_l, y_0, x_c, A, and r^2 for each peak
parameters_for_peaks = []
for params in fitted_params:
    w_g = params[3] * 2
    w_l = params[2] * 2
    y_0 = params[0]
    x_c = params[1]
    A = y_0 * w_g / (np.pi * w_l)
    residuals = y - multi_voigt_function(x, *params)
    r_squared = 1 - (np.var(residuals) / np.var(y))
    parameters_for_peaks.append([w_g, w_l, y_0, x_c, A, r_squared])

# Calculate Voigt function values for the entire x range
# Add the Voigt function values as a new column in the DataFrame
voigt_values = multi_voigt_function(x, *params_fit)
xrcfile['Voigt_values'] = voigt_values

print("The updated XRC datafile is: \n", xrcfile)


# saving the file + fitting
user_input_data = input("Enter a name for the processed DataFrame: ")
file_name_data = user_input_data + '.csv'
xrcfile.to_csv(file_name_data, index=False)


# Plot the data and the fitted Voigt peaks
user_plot_title = input("Enter a title for extracted XRC plot: ")
user_title = user_plot_title
plt.plot(x, y, marker='.', ls='', ms=7, mec='black', label='Data')
for i, params in enumerate(fitted_params):
    plt.plot(x, multi_voigt_function(x, *params), label=f'Voigt Peak {i + 1} Fit')
plt.xlabel('Subtended Angle (arcseconds)')
plt.ylabel('Normalized Intensity')
plt.title(f'{user_title}')
plt.grid(True)
plt.legend()


# Save figure
user_input_fig = input("Enter a name for this figure: ")
file_name_fig = user_input_fig + '.svg'
# Save the DataFrame as a SVG file
plt.savefig(file_name_fig, format='svg')
plt.show()

# Set fit parameters
fwhm_values = [np.round(fwhm, decimals=4) for fwhm in fwhm_values]
fwttm_values = [np.round(fwttm, decimals=4) for fwttm in fwttm_values]
gaussian_values = [np.round(params[0] * 2, decimals=4) for params in fitted_params]
lorenztian_values = [np.round(params[2] * 2, decimals=4) for params in fitted_params]
height_values = [np.round(params[0], decimals=4) for params in fitted_params]
centroid_values = [np.round(params[1], decimals=4) for params in fitted_params]
area_values = [np.round(params[0] * params[3] / (np.pi * params[2] * 2), decimals=4) for params in fitted_params]


# check for goodness of fit with adjusted Chi-squared and R-squraed
rsquare_values = [np.round(params[5], decimals=4) for params in parameters_for_peaks]
def chi2(x, y, voigt_function, params_fit):
    return 1 / (len(x) - len(params_fit)) * sum((voigt_function(x, *params_fit) - y) ** 2)
chi2_values = [np.round(chi2(x, y, multi_voigt_function, params), decimals=4) for params in fitted_params]

# Define row labels
row_labels = ['FWHM', 'FWTTM', 'Gaussian Width', 'Lorenztian Width', 'Peak Height', 'Peak Centroid', 'Area', 'R-squared Fit', 'Adjusted Chi-squared']


# create DataFrame with row labels
parameter_xrcfile = pd.DataFrame(index=row_labels)

# Add the values to the DataFrame
parameter_xrcfile['Value'] = [
    fwhm_values,
    fwttm_values,
    gaussian_values,
    lorenztian_values,
    height_values,
    centroid_values,
    area_values,
    rsquare_values,
    chi2_values
]

print(parameter_xrcfile)


# save parameters file
user_input_params = input("Enter a name for the Fitting Parameters DataFrame: ")
param_file_name = user_input_params + '.csv'
parameter_xrcfile.to_csv(param_file_name, index=False)


print(f"Your data has been saved as {file_name_data}, {file_name_fig}, and {param_file_name}")
